#######
# All import we need
#######
import cppyy
import numpy as np
import ctypes
from bqplot import Graph, LinearScale, ColorScale, Figure, Tooltip
from ipywidgets import HBox,Label,IntSlider,Button,Layout,interact,dlink,interactive
from string import ascii_uppercase

cppyy.include("features.h")

cppyy.load_library("libArete")
cppyy.load_library("libSommet")
cppyy.load_library("libGraphe")
cppyy.load_library("libTuyau")
cppyy.load_library("libFordFulkerson")
cppyy.load_library("libCreerGraphe")

###########
# Each historic's row are like an iteration
# Columns are following:
# Nb_Sommet,Couleur,Sommet,Tuyau/Arete.
############
_nbIter
historic
_Substep
_NbSubstep
_Subcolor
_Subpipe
coor
_x=[0 for i in range(_nbSommet)]
_y=[0 for i in range(_nbSommet)]

########
#To clear historic or debugg 
# reset : _nbIter; historic; _Substep; _NbSubstep; _Subcolor; _Subpipe
########
def reset():
    
#############
# Resize our print
#############
fig_layout

######
# Create a sample graph we have create before. 
######
g = cppyy.gbl.exampleGraph()

######
# Create a object FordFulkerson to know with wich algorithm we solve our problem
######
ff = cppyy.gbl.FordFulkerson(g)

######
# Keep the number of graph' sommet 
######
_nbSommet

#######
# Keep the number of edge
#######
_nbArete

#######
# Keep the number of pipe
#######
_nbTuyau

#############
# Save the current color's state of each summit.
#############
def allColor(graph):
    return table_color

#############
# Save the current state of each pipe.
#############
def allPipe(graph):
    return table_pipe

#############
# Function to launch Flot Max algorithm until the flot stay the same.
# For each iteration we save the graph state in 'historic'
#############

def SolverGraph(graph, fordfulkerson,_nbSommet,_nbTuyau):
    return 0

#############
# Save graph state after one iteration of search flot.
#############
def recupIterMain(iterate, historic):
    return (node_data,link_data,colors)

#############
# Save graph state after one iteration of search flot.
#############
def recupIter(iterate):
    return (node_data,link_data,colors)

#############
# Save graph state any times we change the color of one summit.
#############
def recupSubIter(step,iterate):
    return (node_data,link_data,colors)

##########
# Change graph position as you want (just drag the summit)
##########
def print_event(self, target):
    return 0



##########
# Print a 'sample' graph to change summit position
##########
def graph_dynamic():
    return Figure(marks=[graph], layout=fig_layout)    

##########
# Then, we create a new graph with your summit position (fix this time)
##########
def graph_static():
    return Figure(marks=[graph2], layout=fig_layout)    
#####
# Remarque!!! Deplacer le graphe ne fait pas changer ces coordonn√©es intrasect du graph, donc le rendre static
# transform juste ses aretes en lignes...
#####

################
# Save all substep with only one table
################
def concatTab(hist,subhist,miter,subiter):    
    return res

##########
# Print all main_step in search flot.
##########
def forSlider(x):
    return Figure(marks=[graph], layout=fig_layout)
    
##########
# Print all substep in a step of search flot.
##########
def forSubSlider(x,y):    
    return Figure(marks=[graph], layout=fig_layout)

##################
# Print all substep with only one slider
##################
def forSliderMain(x):
    return Figure(marks=[graph])    

###################
# Execute all code you want!
###################

def execute(graph, method)